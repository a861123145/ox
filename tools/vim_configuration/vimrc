"set nocompatible
"filetype off
"set rtp+=~/.vim/bundle/vundle/
"call vundle#rc()
""
"" let Vundle manage Vundle
"" required! 
"Bundle 'gmarik/vundle'
"
"" My Bundles here:
""
"" original repos on github
"Bundle 'tpope/vim-fugitive'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"Bundle 'tpope/vim-rails.git'
"" vim-scripts repos
"Bundle 'L9'
"Bundle 'FuzzyFinder'
"" non github repos
"Bundle 'git://git.wincent.com/command-t.git'
"Bundle 'JavaBrower'
""" ...
""
"filetype plugin indent on     " required!
"设定文件编码
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
"开启语法加亮
syntax on
"配色风格
colorscheme desert
"设定行距 GUI 界面中生效
set linespace=2
"auto change dir
set autochdir
"设定 GUI 选项
set guioptions=get "m:菜单 T:工具栏 r:右滚动条 L:左滚动条
"set guioptions=grLt
"显示标尺
set ruler
set cursorline
"自动折行
"set nowrap
set wrap
"按完整单词折行
set nolinebreak
"set linebreak
"行宽(输入时自动插入换行符)
set textwidth=100
set textwidth=0
"允许在 虚空间 内操作 (虚空间:不包含任何文本的空间。如行尾之后)
"set virtualedit=all
"禁止在 虚空间 内操作
set virtualedit=
"设定 Tab 键缩进的空格数
set tabstop=4
"设定编辑器将多少空格视为一个缩进
set shiftwidth=4
"将缩进转换为空格
"set expandtab
"设定自动缩进(新行与前一行缩进相同)
set autoindent
"set noautoindent
"插入模式下,“←”如何删除光标前的字符:行首空白、换行符、插入点之前的字符
set backspace=indent,eol,start
"运行在非兼容(VI)模式下(命令模式下 TAB 补全)
set nocompatible
"命令行历史纪录
set history=500
"禁用增量搜索
set incsearch
"set noincsearch
"搜索时忽略大小写
set ignorecase
"set noignorecase
"高亮显示搜索结果
set hlsearch
"设定折叠方式
"set foldmethod=manual
"以下字符将被视为单词的一部分 (ASCII):
"set iskeyword+=33-47,58-64,91-96,123-128
set helplang=cn
set number
set autoindent
set smartindent
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
"let g:winManagerWindowLayout='FileExplorer|TagList'
let g:winManagerWindowLayout='TagList'
nmap wm :WMToggle<cr>
set foldmethod=syntax
"set foldlevel=100 "启动vim时不要自动折叠代码
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
if has('mouse')
	set mouse=a
endif
filetype plugin on
set ruler
set showmatch
set nobackup
set nowritebackup

set wildmode=list:full
set wildmenu
set cscopequickfix=s-,c-,d-,i-,t-,e-
"nmap <C-n> :cnext<CR>
"nmap <C-p> :cprev<CR>
nmap <F6> :cn<cr>
nmap <F7> :cp<cr>
"nmap pr    :prev<CR>
"nmap ne    :next<CR>
nmap <Esc>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Esc>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <Esc>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Esc>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <Esc>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <Esc>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <Esc>8 :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <Esc>d :cs find d <C-R>=expand("<cword>")<CR><CR>


let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1


nnoremap <silent> <F12> :A<CR>
nnoremap <silent> <F3> :Grep<CR>

"filetype plugin indent on
"set completeopt=longest,menu

"let g:SuperTabRetainCompletionType=2
"let g:SuperTabDefaultCompletionType="<C-X><C-O>"

"
"gtk-highlight
let glib_enable_deprecated = 1
" vim macro to jump to devhelp topics.
" Idea copied from the same “emacs intergration” script by ≤author/>
" Gert
function! DevHelpCurrentWord()
	let word = expand( "<cword>" )
	execute "!devhelp --search ".word 
endfunction

" Example: bind h to start devhelp and search for the word under the
" cursor
nmap <Esc>h :call DevHelpCurrentWord()


"google-codesearch from vim
"
function! OnlineDoc()
        let s:browser = "firefox"
        let s:wordUnderCursor = expand("<cword>")

        if &ft == "cpp" || &ft == "c" || &ft == "ruby" || &ft == "php" || &ft == "python"
            let s:url = "http://www.google.com/codesearch?q=".s:wordUnderCursor
            "let s:url = "http://www.google.com/codesearch?q=".s:wordUnderCursor."+lang:".&ft
        elseif &ft == "vim"
            let s:url = "http://www.google.com/codesearch?q=".s:wordUnderCursor
        else
            return
        endif

        let s:cmd = "silent !" . s:browser . " " . s:url
        execute  s:cmd
        redraw!
    endfunction

    " online doc search
   " map <Esc>k :call OnlineDoc()<CR>

"日历控件配置参数
if has("gui_running")
"	set guioptions=
	"colorscheme desert
	colorscheme zellner
	set lines=40 columns=120
endif

"javaBrowser
let JavaBrowser_Ctags_Cmd='/usr/bin/ctags'
"let JavaBrowser_Inc_Winwidth = 0
let JavaBrowser_Inc_Winwidth = 25
nmap <F10> :JavaBrowser<CR>
imap <F10> <ESC><F10>

"function! DoubleSize()
"	if &columns == 150
"		set columns=80
"		WMClose
"	elseif &columns == 80
"		set columns=150
"		WMToggle
"	endif
"	endfunction
"nmap ds :call DoubleSize()<CR>
"imap ds <ESC> ds

"paoh
set path=.,/usr/include/

"execute project related configuration in current directory
"if filereadable("project.vim")
"	source /home/zdavid/workspace/nvz00/android-091120/project.vim
"endif
let s:cwd = getcwd()

while strridx(s:cwd, '/') > 0
	let $projectfile = s:cwd."\/.project/project.vim"
"	echo $projectfile
	if filereadable($projectfile)
		source $projectfile
		break
	endif
	let s:cwd = strpart(s:cwd, 0, strridx(s:cwd, '/'))
"	echo s:cwd
"	echo strridx(s:cwd, '/')
endwhile

"copy paste and cut
vmap <C-c> y
imap <C-p> <Esc>P
vmap <C-x> x

map \{ I/*** WNC david@<C-R>=strftime("%c")<CR> START {{{ ***/<CR><Esc>
map \} A<CR>/*** WNC david@<C-R>=strftime("%c")<CR> END }}} ***/<Esc>

set rtp+=$GOROOT/misc/vim
filetype plugin indent on
syntax on

if &filetype=="python"
	echo &filetype
	filetype plugin indent on
	autocmd FileType python setlocal et sta sw=4 sts=4
	autocmd FileType python setlocal foldmethod=indent
	set foldlevel=99
	DoMatchParen
endif

filetype plugin on
set ofu=syntaxcomplete#Complete
" settings of cscope.
" I use GNU global instead cscope because global is faster.
set cscopetag
set cscopeprg=gtags-cscope
set cscopequickfix=c-,d-,e-,f-,g0,i-,s-,t-
nmap <silent> <leader>j <ESC>:cstag <c-r><c-w><CR>
nmap <silent> <leader>g <ESC>:lcs f c <c-r><c-w><cr>:lw<cr>
nmap <silent> <leader>s <ESC>:lcs f s <c-r><c-w><cr>:lw<cr>
command! -nargs=+ -complete=dir FindFiles :call FindFiles(<f-args>)
au VimEnter * call VimEnterCallback()
au BufAdd *.[ch] call FindGtags(expand('<afile>'))
au BufWritePost *.[ch] call UpdateGtags(expand('<afile>'))
  
function! FindFiles(pat, ...)
     let path = ''
     for str in a:000
         let path .= str . ','
     endfor
  
     if path == ''
         let path = &path
     endif
  
     echo 'finding...'
     redraw
     call append(line('$'), split(globpath(path, a:pat), '\n'))
     echo 'finding...done!'
     redraw
endfunc
  
function! VimEnterCallback()
     for f in argv()
         if fnamemodify(f, ':e') != 'c' && fnamemodify(f, ':e') != 'h'
             continue
         endif
  
         call FindGtags(f)
     endfor
endfunc
  
function! FindGtags(f)
     let dir = fnamemodify(a:f, ':p:h')
     while 1
         let tmp = dir . '/GTAGS'
         if filereadable(tmp)
             exe 'cs add ' . tmp . ' ' . dir
             break
         elseif dir == '/'
             break
         endif
  
         let dir = fnamemodify(dir, ":h")
     endwhile
endfunc
  
function! UpdateGtags(f)
     let dir = fnamemodify(a:f, ':p:h')
     exe 'silent !cd ' . dir . ' && global -u &> /dev/null &'
endfunction

